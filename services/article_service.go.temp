
package services

import (
	"github.com/jimersylee/iris-seed/commons"
	"github.com/jimersylee/iris-seed/commons/db"
	"github.com/jimersylee/iris-seed/models"
	"github.com/jimersylee/iris-seed/repositories"
)

var ArticleService = newArticleService()

func newArticleService() *articleService {
	return &articleService {}
}

type articleService struct {
}

func (this *articleService) Get(id int64) *models.Article {
	return repositories.ArticleRepository.Get(db.GetDB(), id)
}

func (this *articleService) Take(where ...interface{}) *models.Article {
	return repositories.ArticleRepository.Take(db.GetDB(), where...)
}

func (this *articleService) Find(cnd *commons.SqlCnd) []models.Article {
	return repositories.ArticleRepository.Find(db.GetDB(), cnd)
}

func (this *articleService) FindOne(cnd *commons.SqlCnd) *models.Article {
	return repositories.ArticleRepository.FindOne(db.GetDB(), cnd)
}

func (this *articleService) FindPageByParams(params *commons.QueryParams) (list []models.Article, paging *commons.Paging) {
	return repositories.ArticleRepository.FindPageByParams(db.GetDB(), params)
}

func (this *articleService) FindPageByCnd(cnd *commons.SqlCnd) (list []models.Article, paging *commons.Paging) {
	return repositories.ArticleRepository.FindPageByCnd(db.GetDB(), cnd)
}

func (this *articleService) Create(t *models.Article) error {
	return repositories.ArticleRepository.Create(db.GetDB(), t)
}

func (this *articleService) Update(t *models.Article) error {
	return repositories.ArticleRepository.Update(db.GetDB(), t)
}

func (this *articleService) Updates(id int64, columns map[string]interface{}) error {
	return repositories.ArticleRepository.Updates(db.GetDB(), id, columns)
}

func (this *articleService) UpdateColumn(id int64, name string, value interface{}) error {
	return repositories.ArticleRepository.UpdateColumn(db.GetDB(), id, name, value)
}

func (this *articleService) Delete(id int64) {
	repositories.ArticleRepository.Delete(db.GetDB(), id)
}

